import pandas as pd

#key : value 구조를 갖는 딕셔너리를 만들고, 변수 dic_data에 저장한다.

dic_data= {'a':1,'b':2,'c':3}

#판다스의 Series() 함수를 딕셔너리를 시리즈로 변환한다.
#Series() 함수가 변환한 시리즈 객체를 변수 sr에 저장한다.

sr = pd.Series(dic_data)

#변수 sr의 자료형 출력
print(type(sr))
print('\n')

#변수 sr에 저장되어 있는 시리즈 객체를 출력한다.

print(sr)

#시리즈의 index 속성은 인덱스 정보를 제공한다.
#인덱스 범위는 0부터 시작하고 마지막 인덱스값은 포함되지 않는다.

print(sr.index)
print('\n')

#시리즈의 values 속성으로 데이터 배열을 불러온다.
print(sr.values)

tup_data = ('영인','2010-05-10','여',True)

sr = pd.Series(tup_data)
print(sr)

sr_index = pd.Series(tup_data,index=['이름','생년월일','성별','졸업 여부'])
print(sr_index)

print(sr_index[0]) #정수형 위치 인덱스 활용
print(sr_index['이름']) #인덱스 이름 활용


#여러 개의 원소를 선택(인덱스 리스트 활용)

print(sr[[1,2]]) #위치 인덱스 정보 활용
print('\n')
print(sr_index[['이름','생년월일']]) #인덱스 활용

#여러 개의 원소를 선택(인덱스 리스트 활용)
#인덱스 범위 지정

#정수형 인덱스 범위

print(sr_index[1:3])

#인덱스 이름 활용

print(sr_index['생년월일':'졸업 여부'])

#정수형 인덱스 범위 -> 마지막값 포함 안 됨. 실제 리스트 인덱싱 기능과 동일
#인덱스 이름 활용 : 마지막값 포함

#여러 개의 원소를 선택(인덱스 리스트 활용)
#인덱스 범위 지정

#정수형 인덱스 범위

print(sr_index[1:3])

#인덱스 이름 활용

print(sr_index['생년월일':'졸업 여부'])

#정수형 인덱스 범위 -> 마지막값 포함 안 됨. 실제 리스트 인덱싱 기능과 동일
#인덱스 이름 활용 : 마지막값 포함

#개수가 같은 3개의 리스트 만들기

names = ['Bob','Jessica','Mary','John','Mei']
births = [968,155,77,578,973]
custom =[1,5,25,13,23232]

BabyDataset = list(zip(names,births))
print(BabyDataset)
print('\n')

df_test= pd.DataFrame(BabyDataset)
df_test.head()

df= pd.DataFrame(data= BabyDataset,columns=['Names','Births'])
df.head()


print(df.dtypes) # 데이터 타입을 알 수 있다.
print(type(df))

#데이터 프레임의 index 정보 - 행의 수를 알 수 있다.
print(df.index)

#데이터 프레임의 열의 정보 -> 컬럼명을 알 수 있다.
print(df.columns)

df['Names'] #열 선택

df[0:3]
#특정 행 선택


#Births 열에서 100보다 큰 데이터를 필터링한다.
df[df['Births']>100]

#평균값 구하기
df.mean()

import numpy as np


arr1 = np.arange(15) #np.arange =>배열 생성
print(arr1)
print('\n')
arr2 = np.arange(15).reshape(3,5) #=> reshape 3행 5열의 2차원 배열로 다시 만들어준다.
print(arr2)


print(arr2.shape)

arr3 = np.zeros((3,4))
arr4 = np.arange(15).reshape(3,5)
arr4 = np.zeros((2,5))
print(arr3)
print(arr4)

import matplotlib.pyplot as plt

%matplotlib inline



x = df['Names'] #x축 데이터 선택
y = df['Births'] #y축 데이터 선택

plt.bar(x,y) #그래프 만들기
plt.xlabel('Names') #x축 이름
plt.ylabel("Bitrhs") #y축 이름
plt.title('Bar plot') #그래프 이름
plt.show# 그래프 보여주기


np.random.seed(19920613)

#산점도 그래프 데이터 선정
x= np.arange(0.0,100.0,5.0) #0에서 100까지 5단위로 증가하는 값의 배열을 x값으로 선택
y = (x*1.5)+ np.random.rand(20)*50

plt.scatter(x,y,c='b',alpha=0.5,label ='scatter point')
plt.xlabel("X")
plt.ylabel("Y")
plt.legend(loc='upper left')
plt.title('Scatter plot')
plt.show()
